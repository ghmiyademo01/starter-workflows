# GitHub Actions から **OIDC（フェデレーテッド認証）**で Azure にログインして、AKS にアプリをデプロイするワークフロー
# - Azure Container Registry (ACR) にコンテナイメージをビルドしてプッシュ
# - Azure Kubernetes Service (AKS) にアプリをデプロイ
# - Azure CLI と kubelogin を使用して、Azure AD 経由で AKS にログイン
# 事前準備
# - Azure AD アプリケーションの登録と、GitHub OIDC プロバイダの設定
# - Azure リソース（ACR、AKS、リソースグループ）の作成
# - GitHub リポジトリのシークレットに、Azure AD アプリケーションのクライアント ID、テナント ID、サブスクリプション ID を登録
# - AKS クラスターに Azure AD 経由でアクセスできるように設定
# - AKS クラスターにアプリをデプロイするためのマニフェストファイルを用意

name: Build and deploy an app to AKS

on:
  #push:
  workflow_dispatch:

env:  # 共通環境変数
  AZURE_CONTAINER_REGISTRY: githubtestcontainer # ACR 名
  CONTAINER_NAME: githubtestcontainer # コンテナ名
  RESOURCE_GROUP: testMiyaGroup # リソースグループ名
  CLUSTER_NAME: gitHubTest  # AKS クラスター名
#  DEPLOYMENT_MANIFEST_PATH: "your-deployment-manifest-path" # デプロイするマニフェストファイルのパス

jobs:
  buildImage: # buildImage：イメージを ACR でビルド＆プッシュ
    permissions:  # GitHub Actions の権限設定
      contents: read
      id-token: write # OIDC トークン発行のために必要
    runs-on: ubuntu-latest  # ジョブの実行環境
    steps:
      # Steps：ジョブ内で実行するステップ
      - uses: actions/checkout@v4 # リポジトリのコードをチェックアウト

      # JSON 検証ステップを追加
      - name: Validate settings.json
        run: |
          echo "Validating settings.json..."
          jq empty ./app/dist/settings.json
    
      - name: Azure login # Azure にログイン
        uses: azure/login@v1.4.6  # azure/login アクションを使用
        with: # ログインに必要な情報をシークレットから取得
          client-id: ${{ secrets.AZURE_CLIENT_ID }} # Azure AD アプリケーションのクライアント ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }} # Azure AD テナント ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Azure サブスクリプション ID
      
      - name: Build and push image to ACR # ACR にイメージをビルド＆プッシュ
        run: |  # Azure CLI コマンドを実行
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} --file Dockerfile .

  deploy: # AKS の kubeconfig を取得（kubelogin 経由）し、マニフェストをデプロイ
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up kubelogin for non-interactive login  # kubelogin のセットアップ
        uses: azure/use-kubelogin@v1  # kubelogin アクションを使用
        with:
          kubelogin-version: 'v0.0.25'  # kubelogin のバージョンを指定

      - name: Get K8s context # AKS クラスターのコンテキストを設定
        uses: azure/aks-set-context@v3  # aks-set-context アクションを使用
        with:
          resource-group: ${{ env.RESOURCE_GROUP }} # リソースグループ名
          cluster-name: ${{ env.CLUSTER_NAME }} # AKS クラスター名
          admin: 'false'  # 管理者権限ではなく、Azure AD 経由でログイン
          use-kubelogin: 'true' # kubelogin を使用してログイン

      - name: Deploys application # アプリケーションをデプロイ
        uses: Azure/k8s-deploy@v4 # k8s-deploy アクションを使用
        with:
          action: deploy  # デプロイアクションを指定
          # デプロイするマニフェストファイルを指定
          manifests: |  
            k8s/deployment.yaml
            k8s/service.yaml     
          images: | # デプロイするイメージを指定
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}            

      # ▼ ロールアウト完了を待機（タイムアウト180秒）
      - name: Wait for rollout
        run: |
          echo "Waiting for rollout to complete..."
          kubectl rollout status deployment/sampleapp --namespace default --timeout=180s


      # ▼ 失敗時にPod情報を取得
      - name: Debug on failure
        if: failure()
        run: |
          echo "Deployment failed. Fetching details..."
          kubectl describe deployment sampleapp --namespace default
          kubectl get pods --namespace default
