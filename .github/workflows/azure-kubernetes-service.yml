# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and Deploy to AKS

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - "**/*.csproj"
      - "**/*.sln"
      - "src/**"
      - "app/**"
      - "k8s/**"
      - ".github/workflows/azure-kubernetes-service.yml"
  workflow_dispatch:

# ========================
# ▼ 環境変数（要調整：値はすべて静的に設定）
# ========================
env:
  # ACR の “名前のみ”（小文字／FQDN や .azurecr.io は含めない）
  AZURE_CONTAINER_REGISTRY: githubtestcontainer      # 例: githubtestcontainer

  # ACR 内のリポジトリ名（小文字）
  CONTAINER_REPOSITORY: sampleapp                    # 例: sampleapp

  # AKS / RG
  RESOURCE_GROUP: testMiyaGroup                      # 例: testMiyaGroup
  CLUSTER_NAME: gitHubTest                           # 例: gitHubTest

  # Kubernetes （デプロイ先）
  K8S_NAMESPACE: default                             # 例: default
  DEPLOYMENT_NAME: sampleapp                         # 例: sampleapp
  CONTAINER_NAME: sampleapp                          # 例: sampleapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1.4.6
        with:
          # 事前にリポジトリの Secrets → Actions に AZURE_CREDENTIALS を登録（SP の JSON）
          #creds: ${{ secrets.AZURE_CREDENTIALS }}          
          client-id:       ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:       ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Show ACR info (debug)
        run: |
          echo "ACR (name): $AZURE_CONTAINER_REGISTRY"
          az acr show -n "$AZURE_CONTAINER_REGISTRY" -o table

      # -----------------------------
      # Dockerfile がリポジトリ直下にある想定
      # 別ディレクトリなら：
      #   --file app/Dockerfile app
      # のように、Dockerfile パスと “ビルドコンテキスト” を一致させる
      # -----------------------------
      - name: Build image on ACR (az acr build)
        run: |
          # --image は “repository:tag” のみ（FQDN 付けない／小文字）
          az acr build \
            --registry "$AZURE_CONTAINER_REGISTRY" \
            --image "${CONTAINER_REPOSITORY}:${GITHUB_SHA}" \
            --file Dockerfile \
            .

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Ensure namespace exists
        run: |
          kubectl get ns "$K8S_NAMESPACE" >/dev/null 2>&1 || \
          kubectl create ns "$K8S_NAMESPACE"

      # k8s/ にマニフェストがあるなら初回 apply
      - name: Apply Kubernetes manifests (if present)
        run: |
          if [ -d "k8s" ]; then
            kubectl -n "$K8S_NAMESPACE" apply -f k8s/
          else
            echo "k8s/ directory not found. Skipping apply."
          fi

      - name: Update image & rollout
        run: |
          # ★ ここで派生値（FQDN 付きイメージ名）を組み立てる（env 参照は run 内で OK）
          ACR_LOGIN_SERVER="${AZURE_CONTAINER_REGISTRY}.azurecr.io"
          FULL_IMAGE="${ACR_LOGIN_SERVER}/${CONTAINER_REPOSITORY}:${GITHUB_SHA}"
          echo "Setting image to: $FULL_IMAGE"

          kubectl -n "$K8S_NAMESPACE" set image \
            deployment/${DEPLOYMENT_NAME} \
            ${CONTAINER_NAME}=${FULL_IMAGE}

          kubectl -n "$K8S_NAMESPACE" rollout status deployment/${DEPLOYMENT_NAME} --timeout=180s

      # 参考: 初回だけ必要な場合がある（AKS に ACR Pull 権限を付与）
      # 毎回は実行しないことを推奨。必要時のみ手動で uncomment。
      # - name: (One-time) Attach ACR to AKS
      #   run: |
      #     ACR_ID=$(az acr show -n "$AZURE_CONTAINER_REGISTRY" --query id -o tsv)
      #     az aks update -n "$CLUSTER_NAME" -g "$RESOURCE_GROUP" --attach-acr "$ACR_ID"

      # 参考: AKS が ACR から Pull できない場合（401 等）の対処（初回だけ実行推奨）
      # 運用では毎回実行しないでください。必要時のみ手動で有効化。
      # - name: (One-time) Attach ACR to AKS
      #   run: |
      #     ACR_ID=$(az acr show -n "$AZURE_CONTAINER_REGISTRY" --query id -o tsv)
      #     az aks update -n "$CLUSTER_NAME" -g "$RESOURCE_GROUP" --attach-acr "$ACR_ID"


      # Deploys application based on given manifest file
#      - name: Deploys application
#        uses: Azure/k8s-deploy@v4
#        with:
#          action: deploy
#          manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
#          images: |
#            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
