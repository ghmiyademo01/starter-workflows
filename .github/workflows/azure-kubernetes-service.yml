# GitHub Actions から **OIDC（フェデレーテッド認証）**で Azure にログインして、AKS にアプリをデプロイするワークフロー
# - Azure Container Registry (ACR) にコンテナイメージをビルドしてプッシュ
# - Azure Kubernetes Service (AKS) にアプリをデプロイ
# - Azure CLI と kubelogin を使用して、Azure AD 経由で AKS にログイン
# 事前準備
# - Azure AD アプリケーションの登録と、GitHub OIDC プロバイダの設定
# - Azure リソース（ACR、AKS、リソースグループ）の作成
# - GitHub リポジトリのシークレットに、Azure AD アプリケーションのクライアント ID、テナント ID、サブスクリプション ID を登録
# - AKS クラスターに Azure AD 経由でアクセスできるように設定
# - AKS クラスターにアプリをデプロイするためのマニフェストファイルを用意

name: Deploy to Azure Kubernetes Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # JSON 検証ステップを追加
      - name: Validate settings.json
        run: |
          echo "Validating settings.json..."
          jq empty ./app/dist/settings.json

      - name: Set up Azure CLI
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0

      - name: Azure Login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }} # Azure AD アプリケーションのクライアント ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }} # Azure AD テナント ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Azure サブスクリプション ID

      - name: Set AKS context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to AKS
        run: |
          kubectl apply -f .k8s/deployment.yaml
          kubectl rollout status deployment/sampleapp --namespace default --timeout=180s

      - name: Get Pods Status
        if: failure()
        run: |
          echo "Deployment failed. Fetching pod details..."
          kubectl describe deployment sampleapp --namespace default
          kubectl get pods --namespace default
